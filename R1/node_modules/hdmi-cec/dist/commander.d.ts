import { EventEmitter } from 'eventemitter3';
import { CecMonitor } from './cec-monitor';
import { LogicalAddress } from './models/logical-address';
import { UserControlButton } from './models/user-control-buttons';
import { PowerStatus } from './models/power-status';
/**
 * CEC device commander
 *
 * This class provides you with an interface to execute common actions on other CEC-connected devices on the cec bus.
 * This class also provides events signaling other devices turning everything else off, the tv going off, etc.
 * These actions include turning up or down the volume, changing the source on a tv, etc.
 *
 * Most of the message frames are sourced from: http://www.cec-o-matic.com/
 */
export declare class Commander extends EventEmitter {
    readonly monitor: CecMonitor;
    constructor(monitor: CecMonitor);
    /**
     * Turn off all devices on the cec-bus.
     */
    broadcastStandby(): boolean;
    /**
     * Set the power state for the given device.
     *
     * @param state The state to set the device to.
     * @param target The target of the call, defaults to the tv.
     */
    setPowerState(state: PowerStatus, target?: LogicalAddress): boolean;
    /**
     * Get the current powerstate of the given target device.
     *
     * @param target Target cec-device to request the power status for.
     */
    getPowerState(target?: LogicalAddress): Promise<PowerStatus>;
    /**
     * Press the given button on this virtual remote.
     *
     * @param button The button being pressed (and released).
     * @param target The target of the button press (receiver or TV realistically, but can be any logical address).
     */
    pressButton(button: UserControlButton, target?: LogicalAddress): boolean;
    /**
     * Helper method that handles timing out of promises.
     *
     * @param waitForOpcode The opcode to wait for as a response to a call you have already done (Or are about to do).
     * @param resolverMethod Resolver.
     */
    private waitForOperationResponse<T>(waitForOpcode, resolverMethod);
}
