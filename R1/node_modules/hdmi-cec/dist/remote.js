"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var eventemitter3_1 = require("eventemitter3");
var cec_monitor_1 = require("./cec-monitor");
var debuglib = require("debug");
var debug = debuglib('cec:remote');
var keyDownRegexp = /^DEBUG:[ \[\d\]\t]+key pressed: (\w+) \((\w+)\)/g;
var keyUpRegexp = /^DEBUG:[ \[\d\]\t]+key released: (\w+) \((\w+)\)/g;
/**
 * CEC-connected remote handler
 *
 * This class provides an easy interface to connect to the CEC-bus, handle all incomming requests and the setup process,
 * and then provide you just with the events for the pressed buttons on the remote.
 *
 * If you need to control other cec-connected devices (like press buttons, or command other things), you need the commander class.
 *
 * @event keyup Event fired when a pressed key is released.
 * @event keydown Event fired when a key is pressed.
 * @event keypress Event fired when a key is pressed and then released.
 * @event keypress.* Event fired when a specific key is pressed, for a complete list, check the UserControlButtons enum.
 */
var Remote = (function (_super) {
    __extends(Remote, _super);
    function Remote(monitor) {
        if (monitor === void 0) { monitor = new cec_monitor_1.CecMonitor; }
        var _this = _super.call(this) || this;
        _this.monitor = monitor;
        _this.previousKey = '';
        _this.previousKeyCode = -1;
        _this.currentKey = '';
        _this.currentKeyCode = -1;
        monitor.stdinHandlers.push({
            match: keyDownRegexp,
            callback: _this.keyDownDecoder.bind(_this)
        });
        monitor.stdinHandlers.push({
            match: keyUpRegexp,
            callback: _this.keyUpDecoder.bind(_this)
        });
        return _this;
    }
    /**
     * Decodes cec-client messages about keys being pressed.
     * @param message
     */
    Remote.prototype.keyDownDecoder = function (message) {
        var result = keyDownRegexp.exec(message);
        if (result == null) {
            debug('unable to decode keydown message ', message);
            return;
        }
        var keyName = result[1], keyCode = parseInt(result[2], 16);
        debug("received keydown for \"" + keyName + "\" (" + keyCode + ")");
        this.emit('keydown', {
            repeat: (this.currentKey === keyName),
            key: keyName,
            keyCode: keyCode
        });
        this.previousKey = this.currentKey;
        this.previousKeyCode = this.currentKeyCode;
        this.currentKey = keyName;
        this.currentKeyCode = keyCode;
    };
    /**
     * Decodes cec-client messages about keys being released.
     * @param message
     */
    Remote.prototype.keyUpDecoder = function (message) {
        var result = keyUpRegexp.exec(message);
        if (result == null) {
            debug('unable to decode keyup message ', message);
            return;
        }
        var keyName = result[1], keyCode = parseInt(result[2], 16);
        debug("received keyup for \"" + keyName + "\" (" + keyCode + ")");
        this.emit('keyup', {
            key: keyName,
            keyCode: keyCode
        });
        if (this.currentKeyCode === keyCode) {
            debug("emitted keypress for \"" + keyName + "\" (" + keyCode + ")");
            var eventObj = {
                repeat: (this.previousKeyCode === this.currentKeyCode),
                key: keyName,
                keyCode: keyCode
            };
            this.emit('keypress', eventObj);
            this.emit('keypress.' + keyName, eventObj);
            this.previousKey = this.currentKey;
            this.previousKeyCode = this.currentKeyCode;
            this.currentKey = '';
            this.currentKeyCode = -1;
        }
    };
    return Remote;
}(eventemitter3_1.EventEmitter));
exports.Remote = Remote;
//# sourceMappingURL=remote.js.map