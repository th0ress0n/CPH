import { EventEmitter } from 'eventemitter3';
import { CecMonitor } from './cec-monitor';
import { UserControlButton } from './models/user-control-buttons';
/**
 * CEC-connected remote handler
 *
 * This class provides an easy interface to connect to the CEC-bus, handle all incomming requests and the setup process,
 * and then provide you just with the events for the pressed buttons on the remote.
 *
 * If you need to control other cec-connected devices (like press buttons, or command other things), you need the commander class.
 *
 * @event keyup Event fired when a pressed key is released.
 * @event keydown Event fired when a key is pressed.
 * @event keypress Event fired when a key is pressed and then released.
 * @event keypress.* Event fired when a specific key is pressed, for a complete list, check the UserControlButtons enum.
 */
export declare class Remote extends EventEmitter {
    readonly monitor: CecMonitor;
    private previousKey;
    private previousKeyCode;
    private currentKey;
    private currentKeyCode;
    constructor(monitor?: CecMonitor);
    /**
     * Decodes cec-client messages about keys being pressed.
     * @param message
     */
    private keyDownDecoder(message);
    /**
     * Decodes cec-client messages about keys being released.
     * @param message
     */
    private keyUpDecoder(message);
}
export interface KeyEvent {
    repeat?: boolean;
    keyCode: UserControlButton;
    key: string;
}
