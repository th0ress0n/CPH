import { ChildProcess } from 'child_process';
import { EventEmitter } from 'eventemitter3';
import { OperationCode as Opcode } from './models/operation-code';
import { LogicalAddress } from './models/logical-address';
/**
 * CEC Monitor Interface
 *
 * This class provides a way to work with (read out, and write to) the cec-client cli application.
 * It does not contain any (business)-logic, just the interfacing code. If you need a direct interface to the cec-bus, this is the class you need.
 */
export declare class CecMonitor extends EventEmitter {
    readonly deviceName: string;
    readonly deviceAddress: LogicalAddress;
    monitorMode: boolean;
    /**
     * Whether or not the cec-client is ready to write commands.
     */
    ready: boolean;
    /**
     * The handlers that can convert input from the cec-client to events on this class.
     */
    readonly stdinHandlers: (ContainsHandler | MatchHandler | FuncHandler)[];
    /**
     * Name/path of the cec-client process executable.
     */
    protected clientName: string;
    /**
     * Extra parameters that were used to instantiate the monitor process.
     */
    protected params: string[];
    /**
     * The cec-client process spawned by this monitor instance.
     */
    protected client: ChildProcess;
    /**
     * @param deviceName The name of this monitor instance, as used on the cec-bus.
     * @param deviceAddress The address/type/slot to use for this device on the CEC bus. If not available, will take next in same category!
     * @param monitorMode Whether or not to emit operation events for all messages decoded on the bus, or only messages being send to our device or the broadcasting address.
     */
    constructor(deviceName?: string, deviceAddress?: LogicalAddress, monitorMode?: boolean, autostart?: boolean);
    /**
     * Start the monitor, and let it start listening.
     *
     * @param clientName
     * @param rest
     */
    protected start(clientName?: string, ...rest: string[]): void;
    /**
     * Stop the monitor class from listening and kill the cec-client process.
     */
    stop(): void;
    /**
     * Called when the child process exits.
     */
    private onClose();
    /**
     * Send a raw message to the cec-client.
     *
     * @param message The raw message to send.
     */
    send(message: string): boolean;
    /**
     * Send a cec-command by its numbers.
     *
     * When using this version, you need to include the target and source yourself!
     * Check http://www.cec-o-matic.com/ to find messages to send.
     *
     * @param command List of the numeric representations of the commands to send.
     */
    sendCommand(...command: number[]): boolean;
    /**
     * Send a cec-command by its numbers and set the target.
     *
     * @param target The target's cec-address.
     * @param opcode The operation to execute.
     * @param params List of the numeric representations of the parameters to send.
     */
    executeOperation(target: LogicalAddress, opcode: Opcode, params?: number[]): boolean;
    /**
     * Send a cec-command by its type and set the target.
     *
     * @param target The target's cec-address.
     * @param opcode The operation to execute.
     * @param param Boolean parameter to send.
     */
    executeOperationWithBoolean(target: LogicalAddress, opcode: Opcode, param: boolean): boolean;
    /**
     * Send a cec-command by its type and set the target.
     *
     * @param target The target's cec-address.
     * @param opcode The operation to execute.
     * @param param Integer parameter to send.
     */
    executeOperationWithInteger(target: LogicalAddress, opcode: Opcode, param: number): boolean;
    /**
     * Send a cec-command by its type and set the target.
     *
     * @param target The target's cec-address.
     * @param opcode The operation to execute.
     * @param param Integer parameter to send.
     */
    executeOperationWithString(target: LogicalAddress, opcode: Opcode, param: string): boolean;
    /**
     * Send a cec-command by its numbers and set the target.
     *
     * @param command List of the numeric representations of the commands to send.
     */
    executeBroadcastOperation(opcode: Opcode, params?: number[]): boolean;
    /**
     * Processes a log line to set our own device address.
     *
     * @param line The address to change to as extracted from the logs.
     */
    setDeviceAddress(line: string): void;
    /**
     * Process an incomming line.
     *
     * @param line The line that was emitted by the cec-client.
     */
    protected processLine(line: string): number;
    /**
     * Process/parse an incomming traffic line from cec-client.
     *
     * @param traffic The line as it came from the cec-client.
     */
    private processTraffic(traffic);
    /**
     * Converts a parsed packet to events on this emitter.
     *
     * @param packet Parsed packet to be emitted as event.
     */
    private processPacket(packet);
    /**
     * Convert a logical address to an type argument usable with cec-client.
     * @param address Address to convert
     */
    private convertLogicalAddressToClientType(address);
}
export interface ContainsHandler {
    contains: string;
    callback: (line: string) => any;
}
export interface MatchHandler {
    match: RegExp;
    callback: (line: string) => any;
}
export interface FuncHandler {
    fn: (line: string) => any;
    callback: (line: string) => any;
}
export interface ParsedPacket {
    tokens: string[];
    source: number;
    target: number;
    opcode: number;
    args: number[];
}
